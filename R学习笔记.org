* 从数据文件中读入数据
q=read.table("dddd.txt")
如果csv文件，则：
q=read.csv("ddd.csv")
建议把read.table和names, str(描述数据结构）联合起来用。
unique(xxx)---->xxx中不同的数据数量
* 取矩阵的某行某列
a是矩阵。
a[,1]是矩阵a的第一列
a[1，1]是矩阵a的第一行
* 从向量中选取子集
obv[1] ----->取第一个
obv[3] ----->取第三个
obv[5:7]---->取第　5到第　7个
obv[c(1,2,7,1)]-->取第　1,2,7,1个。
用　-　n隐藏第　n个分量。
obv[-3]---隐藏第3个分量
b<-a[c(-5,-7,-9)] ----b是　a隐藏第　5,7,9个分量构成。
b<-a[-4:-8] ----------b是a隐藏4到8个分量构成。

还可用>等逻辑来选取向量的某些满足条件的分量。
c<-a[ a>5 ]
c是a中，所有大于5的分量构成的。
* 产生指定分布函数的随机数
加前缀。
d ------概率分布密度
p ------分布函数
r ------仿真（产生相同分布的随机数）
** 二次分布   binom
离散随机变量
产生10个, size=20, 概率为p=0.3的二次分布随机数
> er<-rbinom(10,20,0.3)
> er
 7 4 4 7 9 5 5 9 7 6

某事情成功概率为0.3, 重复进行20次，成功次数。
第一次进行20次试验，成功次数为7
第2次进行20次试验，成功次数为4
第3次进行20次试验，成功次数为4
第4次进行20次试验，成功次数为7

> hist(er)   -----------查看其分布柱状图

** 正态分布  norm
连续随机变量
产生100个正态分布随机数，它的均值为20,方差为1
sss<-rnorm(100,20,1)

** 均匀分布  unif
连续随机变量。
产生100均匀分布的随机数，它的最小数值为0,最大为30
sss<-runif(100,0,30)

** 泊松分布  pois
离散随机变量。
产生100个pois的随机数，参数为1
sss<-rpois(100,1)


* 总结一个变量的大致情况
　summary(a)
  stem(a)-------数据的大致分布
* 数据的属性

 attributes(a)
 length(a)----求出a的长度，也可括、缩小某向量的长度。
 dim(a)---------求a的维度
** 查看内存中的数据
ls()
** 考察数据的属性
  is.vector 
  is.chacter
  is.numberic
** 强制转变数据属性
  as.vector 
  as.chacter
  as.numberic
* 矩阵
  矩阵是二维的，向量是一维的。
** 创建
   d=matrix(c(1:9),nrow=3,ncol=3,byrow=T)

cbind(x1,x2....)把x1,x2.....以列方式创建成矩阵。
类似的：
rbind(x1,x2....)把x1,x2.....以行方式创建成矩阵。

** 转换
*** 矩阵和向量的转换
   as.matrix把向量转成nx1的矩阵
   as.vector把矩阵转换成向量(从左到右一列一列地读取）
*** 数据框转换为矩阵
   data.frame可以把矩阵转换为数据框
   as.matrix可以把数据框转换为矩阵

** 如何对矩阵按行(列) 作计算？
使用函数apply()
1 vec=1:20
mat=matrix ( vec , ncol=4)
3 vec
cumsum( vec )
5 mat
apply (mat , 2 , cumsum)
7 apply (mat , 1 , cumsum)

** 一组数中随机抽取数据？
函数sample()
sample(n) 随机组合1; : : : ; n
sample(x) 随机组合向量x; length(x) > 1
sample(x, replace = T) 解靴带法------可以重复。
sample(x,n) 非放回的从x 中抽取n 项
sample(x,n, replace = T) 放回的从x 中抽取n 项
sample(x,n, replace = T ,prob = p) 以概率p，放回的从x 中抽取n 项

** 我想查看一个矩阵的前（后）几行，怎么办？
可以使用head() 或tail() 函数。
1 head (CO2)
这两个函数是类函数，它们可以应用于向量、矩阵、数据框、表格或函数

** 矩阵的转置
r=t(r)

** 矩阵中的数据访问法则
a是矩阵。
a[,1]是矩阵a的第一列
a[1，]是矩阵a的第一行
a[1:8,1]是矩阵的第一列的前8个数据。
a[2,1:4]是矩阵的第二行的前4个数据。
a[,2:3]是矩阵的第二、第三列全部数据。
“-”号是排除。
a[2,c(-1,-3)]是第二行中排除了第一列、第三列的全部数据。


* 作图
** 直方图
  hist（x）
  hist(x, breaks=40) ------>breaks是细致度。
  hist(x, col='red',border='blue') --->直方图的中间和边缘颜色
** 如何在同一画面画出多张图？
这里提供三种解决方案：
² 修改绘图参数，如par(mfrow = c(2,2)) 或par(mfcol = c(2,2))；
² 更为强大功能的layout函数，它可以设置图形绘制顺序和图形大小；
² split.screen()函数。

推荐使用layout() 函数，Statistics with R 的一个例子：
1 layout (matrix ( c ( 1 , 1 , 1 ,
2 , 3 , 4 ,
3 2 , 3 , 4 ) , nr = 3 , byrow = T) )
h i s t ( rnorm( 2 5 ) , c o l = "VioletRed")
 h i s t ( rnorm( 2 5 ) , c o l = "VioletRed")
 h i s t ( rnorm( 2 5 ) , c o l = "VioletRed")
 h i s t ( rnorm( 2 5 ) , c o l = "VioletRed")

** 如何在已有图形上加一条水平线

使用低水平绘图命令abline()，它可以作出水平线（y 值h=）、垂线（x 值v=）和斜线（截距a=，斜
率b=）。
R 中的绘图命令可以分为\高水平"（High level）、\低水平（Low level）" 和\交互式"（Interactive）
三种绘图命令。
简要地说，\高水平" 绘图命令可以在图形设备上绘制新图；\低水平" 绘图命令将在已经存在
图形上添加更多的绘图信息，如点、线、多边形等；使用\交互式" 绘图命令创建的绘图，可以使用
如鼠标这类的定点装置来添加或提取绘图信息。在已有图形上添加信息当然要使用\低水平" 绘图
命令。

** 如何在一个图中，画出两个数据线？
# Goal: Display two series on one plot, one with a left y axis
#       and another with a right y axis.

y1 <- cumsum(rnorm(100))
y2 <- cumsum(rnorm(100, mean=0.2))

par(mai=c(.8, .8, .2, .8))
plot(1:100, y1, type="l", col="blue", xlab="X axis label", ylab="Left legend")
par(new=TRUE)
plot(1:100, y2, type="l", ann=FALSE, yaxt="n")
axis(4)
legend(x="topleft", bty="n", lty=c(1,1), col=c("blue","black"),legend=c("String 1 (left scale)", "String 2 (right scale)"))

* 随机数的产生
  用sample函数来产生随机排列或随机样本。
sample(10)产生1-10的随机排列,每个数只出现一次。
sample(10,replace=T)产生1-10的随机排列,每个数可能出现多次,而且每个数字被抽中的概率相等。
产生任何产生离散分布的随机样本：
sample(c('好','坏','中'),size=20,prob=c(1/4,1/4,1/2),replace=T)
产生总数为20,能重复出现，大致概率为1/4,1/4,1/2的几个随机样本。
硬币抛100次，计算总收益。
r=sample(c(-1,1),size=100,rep=T,prob=c(1/2,1/2))
w=cumsum(r)
w=as.ts(w)
plot(w,main="抛硬币")
abline(h=0,col='red')

* 相关性
 使用cor(x,y)来计算向量x和y的相关性。
 cor(basement, livingroom, use="complete.obs")
[1] 0.9513366

* 一元线性回归
  可以用R计算两个向量x和y的线性关系。
> l1 = lm(y ~ x)
> summary(l1)
Call:
lm(formula = y ~ x)
Residuals:
     Min       1Q   Median       3Q      Max
-29.4402  -7.4330   0.2871   7.4971  23.1355
Coefficients:
        Estimate Std. Error t value Pr(>|t|)
(Intercept) 10.2511014  0.0447748  228.95   <2e-16 ***
x           -0.0037324  0.0002172  -17.19   <2e-16 ***
---
Signif. codes:  0 `***' 0.001 `**' 0.01 `*' 0.05 `.' 0.1 ` ' 1
Residual standard error: 9.236 on 169489 degrees of freedom
Multiple R-Squared: 0.00174,    Adjusted R-squared: 0.001734
F-statistic: 295.4 on 1 and 169489 DF,  p-value: < 2.2e-16

上面计算出，y=-0.0037324*x+10.25110
但是，"Residual standard error: 9.236"表明，标准化残差太大，y与x的简单线性模型不佳。

“~”语法指的是一个公式对象。这样的结果是，要求 R 找到系数 A 和 B 使得 sum((y[i]-(A*x[i]+B))^2) 最小。
当 A 为 -0.0037324 （非常平坦），B 为 10.2511014 时得到最佳匹配。注意，

标准化残差（residual standard error）为 9.236，这几乎与 y 初始时的标准偏差大小相同。
这就告诉我们，对室外温度来说，时间的简单线性函数是一个非常不好的模型。 

Multiple R-Squared: 这个数值越接近1.0, 表明这个模型越好。
Pr表述多元回归模型中，自变量选择的合适程度。

* 多元回归模型
  lm(y~x+a+b+c)
  表明：我们猜测变量y的变化是由变量x,a,b,c相关的。
  如果某个变量的p数值大，则这变量与y的关系不大，可以去掉。

  y~x+a+b+c中：
  "~"代表左边的变量可以由右边的来解释。
  y是response, 
  x,a,b,c是predictor
  +是众多变量的连接
  *是某两个变量的交互作用(interaction)



* 查看安装了什么包
  library()
* 安装包

install.packages(pkgname)

For most users it su\uffffces to call \u2018install.packages(pkgname)\u2019 or its GUI equivalent if
e intention is to install a CRAN package and internet access is available.3 On most systems
nstall.packages()\u2019 will allow packages to be selected from a list box.
* 中文名作为变量。
> 怪物名=c("鸟","鱼","兽")
> 很多怪物=rep(怪物名,8)
> 很多怪物
 "鸟" "鱼" "兽" "鸟" "鱼" "兽" "鸟" "鱼" "兽" "鸟" "鱼" "兽" "鸟" "鱼" "兽"
"鸟" "鱼" "兽" "鸟" "鱼" "兽" "鸟" "鱼" "兽"
* 数据排序的方法
Ord1<-order(x) ----->根据x进行排序，Ord1是排序后的！序号！
odered_data<-Data[Ord1,] ---------->按照序号Ord1排列好的！数据！
* 定义变量为因子
因子，就是文字标识的变量，用于理解。
对于有level的那种原始变量，可以定义因子。
方法：
1. 在数据框中，定义一个新变量，以“f"为开头
Squid$fSex<- factor(Squid$Sex)
2. 详细定义之。
Squid$fSex<- factor(Squid$Sex,levels=c(1,2),labels=c("叔叔","阿姨"))
* 应用函数
** tapply
针对某个子集来应用某函数。
tapply(Veg$R, Veg$Transect, mean)-------->在Transect子集上，求R的平均数值。
tapply(Veg$R, Veg$Transect, sd)-------->在Transect子集上，求R的标准方差。
tapply(game_ec$数量,game_ec$奖励名,sum)

** sapply, lapply
针对整个序列应用函数。
a=sapply(Veg[,5:9],sum)
求Veg的第5,6,7,8,9列数据的总和。
> a
       R     ROCK   LITTER       ML BARESOIL 
   578.0   1217.5   1325.5     63.0   1020.5 


* 查看数据在子集上的数量。---table
** 总体
table(Veg$Time)--------统计Veg数据在Time上的分布数量。
1958 1962 1967 1974 1981 1989 1994 2002 
   6    8    8    8    8    4    8    8 
 上述数据表明，落在Time=2002的数据数量为8个。

** 详细
table(Veg$R, Veg$Time)  -----R在Time上的详细分布情况。

    1958 1962 1967 1974 1981 1989 1994 2002
  5     1    0    0    0    0    0    1    0
  6     0    1    2    1    1    0    1    2
  7     1    0    0    0    0    0    2    0
  8     2    1    2    1    0    0    1    1
  9     1    2    1    0    1    0    1    0
  10    0    2    1    0    2    1    1    1
  11    0    1    0    0    1    1    1    0
  12    0    0    1    1    2    0    0    3
  13    1    0    0    0    1    1    0    0
  14    0    0    1    3    0    1    0    1
  16    0    1    0    1    0    0    0    0
  18    0    0    0    1    0    0    0    0

上述数据表明，R=16的，在1962,1974上各自有一个。



* 平滑曲线
x=player_num~player_num_s2$level, y=player_num_s2$player_num 的数据分布，搞一条平滑曲线来发现数据走向趋势。
M.Loess<-loess(player_num_s2$player_num~player_num_s2$level)
Fit<-fitted(M.Loess)
lines(player_num_s1$level,Fit,col='red',cex=4)  -----------画出来。
* 把屏幕上的图，保存到文件中。
1. 创建一个图像文件。
jpeg(file="玩家等级分布曲线.jpg", width=550, height=550,quality=100)
上述参数指定了图的长宽和质量。
2. 画图。
plot(player_num_s1,type='o',cex=1.2,col='blue',main="玩家等级分布 曲线",xlab="等级",ylab="玩家数量")
3. 保存图像。
dev.off()
* 判断某数组中是否有某元素
  D1=(game_ec_data_raw[,2]=="元宝")
  sum(D1)
  判断了它是否有“元宝”这个元素。
* 把数组元素倒序
  rev
  a=c(1,2,3,44,212,3423,2,0,1,23)
  b<-rev(a)
  b
  23    1    0    2 3423  212   44    3    2    1

* 设置小数点后位数
     round(x, digits = 0)
     signif(x, digits = 6)
* C(n,k)的计算
  choose(n,k)
* 二项分布
  p(x)=choose(n,k)p^k(1-p)^(n-k)
** 定义：
     dbinom(x, size, prob, log = FALSE)
     pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE)
     qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE)
     rbinom(n, size, prob)


  ‘dbinom’ gives the density, ‘pbinom’ gives the distribution
  function, ‘qbinom’ gives the quantile function and ‘rbinom’
  generates random deviates.


  size: number of trials (zero or more). 试验次数
  prob: probability of success on each trial. 每次试验的成功概率(相互独立的)

**  dbinom(X,size,prob)
 ‘dbinom’ gives the density.
 N=10, p=0.3, 那麽1:10上的概率是啥子呢？
 a<-dbinom(1:10,10,0.3)
   1             2            3             4          5
 0.1210608210 0.2334744405 0.2668279320 0.2001209490 0.1029193452
   6             7            8             9          10
 0.0367569090 0.0090016920 0.0014467005 0.0001377810 0.0000059049

也就是，X=5的概率是0.1029



** rbinom(n, size, prob)
  n: number of observations.
  根据size和prob, 观察n次，产生具体的成功数。
  b<-rbinom(5,10,0.2);b
  2 2 3 2 1
  
  观察5次，size=10,p=0.2的二项分布，产生的数值。这次观察，数值是 2 2 3 2 1




* 把输出结果放到文件中。
用sink, 很方便的。
方法：
1. sink(文件名)      ---------用于存放数据的数据文件名
2. 显示某数据         --------本来应该在终端显示的数据
3. sink()           --------存放到数据文件中


data (CO2)
sink ( "CO2.txt" )
CO2
sink ()


# go t o y o u r work d i r e c t o r y , you w i l l g e t CO2 . t x t
* 累计干某事情
**  使用cumxxxx(x) 
     cumsum(x)
     cumprod(x)
     cummax(x)
     cummin(x)

  Returns a vector whose elements are the cumulative sums, products,
     minima or maxima of the elements of the argument.

  Returned Value:

     A vector of the same length and type as ‘x’ (after coercion),


* Debug--调试代码
Solution

Insert this into your code at the place where you want to start debugging:

browser()

It will pause your code and you will be able to look at and change variables.

In the browser, typing these letters will do things:
	
c 	Continue
n (or Return) 	Next step
Q 	quit
Ctrl-C 	go to top level

When in the browser, you can see what variables are in the current scope.

objects()
* 去除data.frame重复数据
# A sample data frame:
df <- read.table(header=T, con <- textConnection('
 label value
     A     4
     B     3
     C     6
     B     3
     B     1
     A     2
     A     4
     A     4
'))
close(con)

# Is each row a repeat?
duplicated(df)
# FALSE FALSE FALSE  TRUE FALSE FALSE  TRUE  TRUE

# Show the repeat entries
df[duplicated(df),]
# label value
#     B     3
#     A     4
#     A     4

# Show unique repeat entries 
unique(df[duplicated(df),])
# label value
#     B     3
#     A     4

# Original data with repeats removed. These do the same:
unique(df)
df[!duplicated(df),]
# label value
#     A     4
#     B     3
#     C     6
#     B     1
#     A     2

* 把DataFrame的某一列数据，根据条件改名。
** 第一个方法
# A sample factor to work with.
x <- factor(c("alpha","beta","gamma","alpha","beta"))
# alpha beta  gamma alpha beta 
# Levels: alpha beta gamma

levels(x)
# "alpha" "beta"  "gamma"

# Rename by name: change "beta" to "two"
levels(x)[levels(x)=="beta"] <- "two"
# "alpha" "two"   "gamma"

# Rename by index in levels list: change third item, "gamma", to "three"
levels(x)[3] <- "three"
# "alpha" "two"   "three"

# Rename all levels
levels(x) <- c("one","two","three")
# "one" "two"   "three"

** 另外一个方法
原来数据：
data <- read.table(header=T, con <- textConnection('
 subject sex control cond1 cond2
       1   M     7.9  12.3  10.7
       2   F     6.3  10.6  11.1
       3   F     9.5  13.1  13.8
       4   M    11.5  13.4  12.9
 '))
close(con)



Code Male as 1 and Female as 2, and put it in a new column.
data$scode[data$sex=="M"] <- "1"
data$scode[data$sex=="F"] <- "2"


# subject sex control cond1 cond2 scode
#       1   M     7.9  12.3  10.7     1
#       2   F     6.3  10.6  11.1     2
#       3   F     9.5  13.1  13.8     2
#       4   M    11.5  13.4  12.9     1
* 改数据框的名称
  d是数据框。
  names(d)[names(d)=="beta"] <- "two"
* 给数据框加一列。
  d是数据框。加上一列：
  d$Size<-0    加上了名字叫"Size"的列，而且全部数据为0
 
* 给数据框消除某列。
  d是数据框。消除一列：
  d$Size<-NULL    把名字叫"Size"的列彻底干掉了。
* 按某种标准取数据子集。
To get a subset based on some conditional criterion, the subset() function or indexing using square brackets can be used. 
In the examples here, both ways are shown.
# A sample vector
v <- c(1,4,4,3,2,2,3)
取v中小于3的u数据组成的子集合：
subset(v, v<3)
v[v<3]

# 取集合A中，不在集合B中的数据。
> X<-c(1,2,3,4,5,6)
> Y<-c(1,2,3)
取X中不在Y中的数据集合。
> subset(X,!(X %in% Y))
[1] 4 5 6

* ggplot2学习
  数据
  start_day,  end_day, cunliu_ratio
2012-06-07 , 2012-06-08 , 27.32207 
2012-06-07 , 2012-06-09 , 21.0193 
2012-06-07 , 2012-06-10 , 17.34017 
2012-06-07 , 2012-06-11 , 16.40531 
2012-06-07 , 2012-06-12 , 13.96261 
2012-06-07 , 2012-06-13 , 14.95778 
2012-06-07 , 2012-06-14 , 14.26417 
2012-06-07 , 2012-06-15 , 12.54524 
2012-06-07 , 2012-06-16 , 11.36912 
2012-06-07 , 2012-06-17 , 10.52473 
2012-06-07 , 2012-06-18 , 11.33896 
2012-06-07 , 2012-06-19 , 10.13269 
2012-06-07 , 2012-06-20 , 9.529554 
2012-06-07 , 2012-06-21 , 9.37877 
2012-06-07 , 2012-06-22 , 8.05187 
2012-06-07 , 2012-06-23 , 8.624849 
2012-06-07 , 2012-06-24 , 8.112183 
2012-06-07 , 2012-06-25 , 7.418577 
2012-06-07 , 2012-06-26 , 7.720145 
2012-06-07 , 2012-06-27 , 6.212304 
2012-06-07 , 2012-06-28 , 6.966224

** 画曲线
day1_cunliu<-read.csv("第一天存留率.txt",header=TRUE)
画红色线，加蓝色点。
ggplot(data=day1_cunliu, aes(x=end_day, y=cunliu_ratio,group=1)) + 
      geom_line(colour="red",  size=1.5)+
      geom_point(colour="blue", size=4, shape=21, fill="white")

在上面的基础上，加x,y,和图像说明文字。

ggplot(data=day1_cunliu, aes(x=end_day, y=cunliu_ratio,group=1)) + 
      geom_line(colour="red",  size=1.5)+
      geom_point(colour="blue", size=4, shape=21, fill="white")+
      xlab("日期") + ylab("存留率")+
      opts(title="十区第一日存留率曲线")
 

画玩家操作数，并在每个点上画出数值。
呵呵，方法就是：aes一个label, 然后用geom_text画出。
ggplot(player_average_op, aes(x=日期,y=玩家平均操作数,group=1,label=round(玩家平均操作数,1)))+
geom_line(color='blue')+geom_point(color="blue",size=4)+geom_smooth(color="red")+
opts(title="十区玩家操作数曲线")+geom_text(vjust=-1,hjust=0.3,angle=10)

画bar,加数字，加红颜色
p<-ggplot(data=d,aes(x=Var1,y=Freq,label=Freq))
p+geom_bar(fill="red")+geom_text(vjust=-0.5,hjust=-0.4,color="blue")+xlab("答题数量")+ylab("答题人数")



p<-ggplot(data=kaoshi_report,aes(x=日期,y=参与占比,label=参与占比,group=1))
p+geom_line(color="red")+geom_point(color="blue",size=3,fill="red")+geom_text(color='red',vjust=0,hjust=-0.3,angle=45)+ylab("玩家参与占比%")+opts(title="十区考试答题玩家参与占比图")
ggsave("考试答题玩家参与占比图.png")


p+geom_line(color="red")+geom_point(color="blue",size=3,fill="red")+geom_text(color='red',
vjust=0,hjust=-0.3,angle=45)+ylab("参与玩家平均答题数")+opts(title="十区考试答题参与玩家平均答题数")
+scale_y_continuous(limits=c(20,25))    ------>Y坐标限制在(20,25)

p+geom_line(color="red")+geom_point(color="blue",size=3,fill="red")+
ylab("参与玩家平均答题数")+opts(title="十区考试答题参与玩家平均答题数")+scale_y_continuous(limits=c(20,25))+
geom_smooth(color="green",size=2)+geom_text(color='red',vjust=0,hjust=-0.3,angle=45)


p<-ggplot(data=caiji,aes(x=日期,y=参与占比,label=参与占比,group=1))
p+geom_line(color="red")+geom_point(color="blue",size=3,fill="red")+geom_text(color='red',vjust=0,hjust=-0.3,angle=45)+ylab("玩家参与占比%")+opts(title="十区采集玩家参与占比图")
ggsave("十区采集玩家参与占比图.png")  


** 在同一个图上，画出两条曲线

*** 数据来源：
一个叫"D3"的数据框，内容如下：

,结婚次数,星级,huoban
1,2,3,皇后祝福的老王
2,3,3,皇后祝福的老王
3,4,4,皇后祝福的老王
4,5,5,皇后祝福的老王
5,6,6,皇后祝福的老王
。。。。。。。。。。。
604,2,2,没有皇后祝福的张飞
605,3,3,没有皇后祝福的张飞
606,4,3,没有皇后祝福的张飞
607,5,4,没有皇后祝福的张飞
608,6,4,没有皇后祝福的张飞
609,7,5,没有皇后祝福的张飞
610,8,5,没有皇后祝福的张飞
611,9,6,没有皇后祝福的张飞
612,10,6,没有皇后祝福的张飞


*** 代码

Q<-ggplot(D3,aes(x=结婚次数,y=星级,group=huoban))
Q+geom_line()
Q+geom_line(aes(color=huoban))

解析：aes参数中,搞一个group,以其区分两条或多条曲线。

日期:<2012-09-27 四>
2012年09月27日 11:50:03


** 同一个图画出两条曲线
题目：假设相同x对应y1,y2, 要用不同的曲线和颜色画出来。
做法：假设x的取值范围为[n1.....n2]

制造这样的中间数据（x,Y<y1,y2>,group），把（x,y1)和(x,y2)增加一个维度group:

X   Y   group
n1  y1   a
.........a
n2  y1   a
n1  y2   b
.........b
n2  y2   b

然后，画图。
ggplot(data,aes(x=x,y=Y,group=group,color=group)就可以了！
实际例子：

x <- seq(0.01, .99, length=100) 
df <- data.frame(x = rep(x, 2), y = c(qlogis(x), 2 * qlogis(x)), 
    group = rep(c("a","b"), each=100)) 
p <- ggplot(df, aes(x=x, y=y, group=group)) 
p + geom_line(linetype = 2) 

解析：
x是从0.01到0.99的100个等差数列。
y1=qlogis(x)
y2=2*qlogis(x)
为了在同一图中画出y1,y2,故意制造了一个数据框df, 
df的x是原来x重复两次，x=rep(x,2)
y是y1,y2的连接c(s1,s2)
它们用group区分起来，也就是前面100个a，后面100个b
画图就用group区分出两曲线：
p <- ggplot(df, aes(x=x, y=y, group=group)) 
还可以加上颜色区分：
p <- ggplot(df, aes(x=x, y=y, group=group,color=group)) 


* 测试某向量的数据是否来自正态分布。
 x是向量, 可以用shapiro.test(s)来测试它是否正态分布。

 shapiro.test(s)

	Shapiro-Wilk normality test

data:  sss 
W = 0.9875, p-value = 0.4719

注意，p-value要大于0.05才是正态分布哦。
